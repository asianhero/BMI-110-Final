# Initialize the constants
import sys

# Define the Menu class
class Menu:
    def __init__(self, main_menu = 0):
        self.main_menu = main_menu
    
    # Define a function to allow user to choose from menu options
    def user_input(self):
        while True:
            user_selection = input("Welcome to the main menu. Select a number: \n1. Patient Portal\n"
                                   "2. Doctor Portal\n"
                                   "3. Nurse Portal\n"
                                   "4. Exit Program\n"
                                   "Please select: ")
            try: 
                try:
                    self.main_menu = int(user_selection)
                    if self.main_menu == 1:
                        print("Patient Portal selected. ")
                        d = Patient()
                        d.patient_names()
                        break
                    elif self.main_menu == 2:
                        print("Doctor Portal selected. ")
                        e = Doctor()
                        e.doctor_login()
                        break
                        
                    elif self.main_menu == 3:
                        print("Nurse Portal Selected. ")
                        f = Nurse()
                        f.nurse_login()
                    elif self.main_menu == 4:
                        print("Exiting Program ")
                        sys.exit(0)
                    else:
                        print('Wrong number selected. Try again. \n')
                except ValueError:
                    self.main_menu = float(user_selection)
            except ValueError:
                print("Error, not a number. Try again. \n")

# PERSON MODULE
class Person:
    def __init__(self, last_name, first_name):
        self.first_name = first_name
        self.last_name = last_name

    def print_name(self):
        print('\nProfile for %s %s: , Email: %s: , Phone number: %s' 
              % (self.first_name, self.last_name, self.email, self.phone)) 
        
# DOCTOR MODULE       
class Doctor(Person):
    # Initialize Doctor constants
    def __init__(self, first_name = '', last_name = '', dictionary_keys = {}, test_list = {}, cost = 0, tests = {}, total = 0, medication = {}, medications = {}, price = [], doctor_login_info = {'c': '1'}, med_info = {}, key_two = {} ):
        super().__init__(first_name, last_name)
        self.first_name = first_name
        self.last_name = last_name
        self.dictionary_keys = dictionary_keys
        self.test_list = test_list
        self.cost = cost
        self.tests = tests
        self.total = total
        self.medication = medication
        self.medications = medications
        self.price = price
        self.doctor_login_info = doctor_login_info
        self.med_info = med_info
        self.key_two = key_two
        
    # Doctor login
    def doctor_login(self):
        w = Doctor()
        print("Hello! Before going any further, provide your Doctor login please.\n "
              "If a new user, log in with the default credentials and then you'll\n "
              "be able to create a new profile. ")
        while True:
            try:
                try:
                    doctor_user = input("Username: ")
                    #if doctor_user == default_doctor_ID or 
                    if doctor_user in self.doctor_login_info.keys():
                        doctor_pass = input("What is your password? ")
                        if doctor_pass in self.doctor_login_info.values():
                            print(f'Welcome {doctor_user}!')
                            w.doctor_menu()
                        else:
                            print("Wrong password")
                    else:
                        print("Wrong username. ")
                except ValueError:
                    doctor_pass = float(doctor_pass)
            except ValueError:
                print("Try again. ")          
                
     # Create a new doctor profile
    def create_new_doctor(self):
        create_new = input('Would you like to create new Doctor Profile (Y)es or (N)o?')
            
        while create_new != 'y' and create_new != 'Y':
            create_new = input("That's not a valid choice, please try again\n (Y)es or (N)o? ")
            print(create_new)

        if create_new == 'Y' or create_new == 'y':
            print('Let''s create a new profile')
            attributes_list2 = []
            self.first_name = input('Please enter the first name of the doctor you wish to add: ')
            attributes_list2.append(self.first_name)
            self.last_name = input('Please enter the last name of the doctor you wish to add: ')
            attributes_list2.append(self.last_name)
            self.specialty = input('Please enter specialty: ')
            attributes_list2.append(self.specialty)
            self.phone_number = input('Please enter phone number: ')
            attributes_list2.append(self.phone_number)
            self.username = input('Please enter new username: ')
            attributes_list2.append(self.username)
            self.password = input('Please enter new password: ')
            attributes_list2.append(self.password)
            print('The following doctor profile was written: \nFirst Name: %s \nLast Name %s \nSpecialty %s \nPhone Number %s \nusername %s \nPassword %s'
                  % (self.first_name, self.last_name, self.specialty, self.phone_number, self.username, self.password))
            # Store new doctor login info
            self.doctor_login_info[self.username] = self.password
            print(self.doctor_login_info)
                
    # Defines the doctor menu
    def doctor_menu(self):
        doctor = Doctor()
        n = Nurse()
        main_menu = Menu()
        while True:
            try:
                doctor_welcome = int(input("Welcome to the Doctor Portal. \nTo create a Patient profile, press 1.\n"
                                            "For a list of patients, press 2.\nTo assign lab tests to a patient, press 3.\n"
                                            "To create a new Doctor Profile, press 4.\n"
                                            "To assign medication, press 5\n"
                                            "To diagnose allergies, press 6\n"
                                           "To switch to  Nurse view, Press 7\n"
                                            "To discharge a patient, press 8\n"
                                            "To go back to the main menu, press 0. Please select: "))
                try:
                    if doctor_welcome == 0:
                        main_menu.user_input()
                    elif doctor_welcome == 1:
                        print('\nWelcome to create a patient profile. ')
                        key_add = int(input("How many patients to add? "))
                        for patient in range(key_add):
                            doctor.database_addition()
                            doctor.database()
                        back_to_patient_menu = input('Back to patient menu? (Y)es or (N)o?  ')
                        if back_to_patient_menu == "n" or back_to_patient_menu == "N":
                            break
                        while back_to_patient_menu != 'y' and back_to_patient_menu != 'Y':
                            back_to_patient_menu = input("That's not a valid choice. (Y)es or (N)o? ")
                            if back_to_patient_menu == "n" or back_to_patient_menu == "N":
                                sys.exit()
                    elif doctor_welcome == 2:
                        if not self.dictionary_keys:
                            print("Empty")
                        else:
                            print("\nHere's a list: ")
                            doctor.database()
                    elif doctor_welcome == 3:
                        doctor.lab_tests_request()
                        
                    elif doctor_welcome == 4:
                        doctor.create_new_doctor()
                        
                    elif doctor_welcome == 5:
                        doctor.assign_medication()
                        
                    elif doctor_welcome ==6:
                        doctor.dallergies()

                    elif doctor_welcome == 7:
                        print('Now entering Nurse view:')
                        n.nurse_menu()
                    elif doctor_welcome == 8:
                        doctor.discharge_patient()

                except ValueError:
                    doctor_welcome = float(doctor_welcome)
            except ValueError:
                print("Try again. ")
                             
    # Assign unique patient ID and get patient info
    def database_addition(self):
       print("For the patient identifier, we'll use the patient ID. ")
       self.key_id = input("Patient ID: ")
       attributes_list = []
       attributes_list_two = []
       self.first_name = input("First name: ")
       attributes_list.append(self.first_name)
       self.last_name = input("Last name: ")
       attributes_list.append(self.last_name)
       self.age = int(input("age: "))
       attributes_list.append(self.age)
       self.address = input("Address: ")
       attributes_list.append(self.address)
       self.admit_date = input("Admit date: ")
       attributes_list.append(self.admit_date)
       self.dictionary_keys[self.key_id] = attributes_list
       # Putting in TestID is fine, just a unique area for each patient to house their tests
       self.test_id = input("Test ID: ")
       self.key_two[self.test_id] = attributes_list_two
       
    
    #Only doctors can assign allergies, not nurse
    def dallergies(self):
        allergy_list = []
        allergy_key = "     Allergy"
        number_of_allergies = int(input("How many allergies? "))
        for item in range(number_of_allergies):
            self.allergies = input("Enter allergy: ")
            allergy_list.append(self.allergies)
        self.dictionary_keys[allergy_key] = allergy_list
        
    # Create discharge patient function
    def discharge_patient(self):
        doctor = Doctor()
        filename = input("First Name: ")
        filename_2 = input("Last Name: ")
        with open(filename + filename_2 + "_discharged", "w") as f:
            f.write((filename + filename_2 + doctor.medication_price()))
            number = input("ID to discharge: ")
            test = input("Test ID:")
            if number in self.dictionary_keys.keys():
                pop_dict = self.dictionary_keys.pop(test)
                pop_dict = self.dictionary_keys.pop(number)
            print(self.dictionary_keys)  
                           
                           
    # Create a lab test database               
    def database(self):
        for key,value in self.dictionary_keys.items():
            print(key,value)
        if not self.dictionary_keys:
            print("empty")
        for key,value in self.key_two.items():
            print(key,value)
        if not self.key_two:
            print("empty")
            
    # Fetch lab test database       
    def fetch_dictionary_keys_value(self,key):
        return self.dictionary_keys[key]
    
    def fetch_key_two_value(self,key):
        return self.key_two[key]
    
    # Defines a list of lab tests to choose from with associated prices
    def lab_tests(self):
        self.test_list = {'ABG': 500 , 'LFT': 400, 'COAGULATION': 600, 'CBC': 200, 'TSH': 100, 'CHOLESTEROL': 200}
        for key,value in self.test_list.items():
            print(key,value)
    # Fetches lab tests
    def fetch_lab_tests(self,key):
        return self.test_list[key]
    
    # Fetches lab tests costs
    def fetch_lab_costs(self):
        return self.test_list.values()
        
    # Defines a function to request the lab tests 
    def lab_tests_request(self):
        labs = Doctor()
        labs.database()
        while True:  
            try:
                try:
                    self.tests.clear()
                    doctor_request = input('\nSelect the patient ID for the patient you wish to request tests: ')
                    name_request = input("What is the patient's first name? ")
                    number = input("Test ID? ")
                    request = labs.fetch_dictionary_keys_value(doctor_request)
                    request_two = labs.fetch_key_two_value(number)
                    print(request)
                    labs.lab_tests()
                    if number in self.key_two.keys():
                        if doctor_request in self.dictionary_keys.keys():
                            if name_request in request:
                                request_number = int(input("How many tests to request? "))
                                for test in range(request_number):
                                    test_request = input('Which test to request? ').upper()
                                    test = labs.fetch_lab_tests(test_request)
                                    test_cost = labs.fetch_lab_costs()
                                    if test in test_cost: 
                                        #self.cost = test
                                        self.tests[test_request] = test #self.cost
                                        request_two.append(test)#self.cost)
                                        self.total = sum(request_two)
                                    else:
                                        print("Test not found")  
                            print(self.total)
                            request.append(self.tests.copy())
                            labs.patient_billing(number)
                        user_input = input("Back to test menu? ")
                        if user_input == "y" or user_input == "Y":
                            labs.lab_tests_request()
                        if user_input == "n" or user_input == "N":
                            labs.doctor_menu()
                except ValueError:
                    request_number = float(request_number)
            except ValueError:            
                print("Try again")
                
    def patient_billing(self,number):
        cost = 0
        print('\n'.join("{}: ${}".format(k,v) for k,v in self.tests.items()))
        for key,value in self.key_two.items():
            if key == number:
                cost = sum(value)
        #for key in self.tests:
        print(f'The sum of medications ordered is ${cost}')
        
 # Creates medication database
    def medication_database(self):
        for key,value in self.dictionary_keys.items():
            print(key,value)
            
    # Returns patient ID
    def fetch_medication_database(self,key):
        return self.dictionary_keys[key]
    
    # Defines a list of lab tests to choose from with associated prices
    def medication_types(self):
        self.medication = {'ANTIBIOTIC': 50 , 'STATIN': 40, 'IBUPROFEN': 6, 'ALBUTEROL': 20, 'THEOPHYLINE': 100, 'INSULIN': 200}
        for key,value in self.medication.items():
            print(key,value)
    # Fetches medication
    def fetch_medication(self,key):
        return self.medication[key]
    # Fetches medication costs
    def fetch_medication_price(self):
        return self.medication.values()
    # Writes a text file with medication cost
    def medication_price(self):
        price = sum(self.medications.values())
        #for key in self.tests:
        print(f'The medications ordered are {self.medications} and the sum of medications ordered is ${price}')
            #print("The tests ordered are: {} ".format(key),end = "")

    # get dosage, route, and frequency information
    def medication_dosage(self):
        medication_dosage = input("Please indicate how many milligrams of the medication is to be taken ")

        #self.med_info["Dosage"] = medication_dosage
        #print(self.med_info)
        return medication_dosage
    def medication_route():
        medication_route = input("Please indicate how medication is to be administered\nOrally, Intravenously, or via Injection")
    def medication_frequency():
        medication_frequency = input("Please indicate the frequency of which the medication is to be taken/administered")
    
    def assign_medication(self):
        meds = Doctor()
        assign_medication = input('Enter the patient ID receiving the medication: ')
        meds.database()
        #Patient Request
        patient_Request = meds.fetch_dictionary_keys_value(assign_medication)
        print(patient_Request)
        meds.medication_types()
        while True:
            try:                
                req_number = int(input("\nHow many medications to assign? "))
                for medication in range(req_number):
                    medication_chosen = input('Which medication(s) to request? ').upper()
                    medication = meds.fetch_medication(medication_chosen)
                    medication_cost = meds.fetch_medication_price()
                    if medication in medication_cost: 
                        self.price = medication
                        self.medications[medication_chosen] = self.price
                        meds.medication_dosage()
                    else:
                        print("Medication not found")
                meds.medication_price()
                
                user_input = input("Back to Doctor Menu? ")
                if user_input == "y" or user_input == "Y":
                    meds.doctor_menu()
                while user_input != 'y' and user_input != 'Y':
                    user_input = input("That's not a valid choice. (Y)es or (N)o? ")
                    if user_input == "n" or user_input == "N":
                        sys.exit()
            except ValueError:
                print("Try again")   

   # Allergies function
    def allergies(self):
        allergiesList = []
        try:
            allergies = input('1: Input new allergies\n'
            '2: View patient allergies\n'
            '3: Return to Doctor portal\n'
            'Please select option 1, 2 or 3: ')
            allergies = int(allergies)
            try:
                if allergies == 1:
                    addedAllergies = input('\nHow many allergies will the patient be diagnosed with: ')
                    addedAllergies = int(addedAllergies)
                    for i in addedAllergies:
                        diagnosedAllergies = input('Allergy: ')
                        allergiesList.append(diagnosedAllergies)
                    print(*allergiesList, sep = ', ')       
                elif allergies ==2:
                    if not allergiesList:
                        print('Empty')
                    else:
                        print('Allergies list: ')
                        print(*allergiesList, sep = ', ')
                elif allergies == 3:
                    sys.exit
                else:
                    # just prints options, no input for user nor allows for user input
                    print('Invalid number selected\n'
                    '1: Input new allergies\n'
                    '2: View patient allergies\n'
                    '3: Return to Doctor portal\n'
                    'Please select option 1, 2 or 3: ')
            except TypeError:
                allergies = float(allergies)
        except: 
            print('Invalid input, please enter a number.')
        return allergiesList
            

# PATIENT CLASS
class Patient(Doctor):
    def __init__(self, patient_id = 0, first_name = '', last_name = '', age = 0,
                 address = '', admit_date = ''):
        super().__init__(first_name = '', last_name = '', dictionary_keys = {}, test_list = {}, cost = 0, tests = {}, total = 0,)
        self.patient_id = patient_id
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.address = address
        self.admit_date = admit_date
        
    # Get patient informtion
    def patient_names(self):
        doctor = Doctor()
        main_menu = Menu()
        
        while True:
            count = 0
            counts = 0
            cost = 0
            try:
                patient_welcome = int(input("\nIf you're a patient and would like to see your profile, press 1.\n"
                                            "To go back to the main menu, press 0. Please select: "))
                try:
                    if patient_welcome == 0:
                        main_menu.user_input()
                    if patient_welcome == 1:
                        patient_id = input("\nWhat is your unique patient ID? ")
                        patient_first_name = input("What is your first name? ")
                        patient_last_name = input("What is your last name? ")
                        patient_test = input("What is your unique test code? ")
                        result = doctor.fetch_dictionary_keys_value(patient_id)
                        if patient_first_name in result:
                            if patient_last_name in result:
                                for c in patient_first_name:
                                    if c in result[0]:
                                        count += 1
                                for c in patient_last_name:
                                    if c  in result[1]:
                                        counts += 1
                                s = '*'
                                print(f'Hello {patient_first_name[0] :{s}<{count}}' + f'{patient_last_name[0] :{s}<{counts}}')
                                for key,value in self.key_two.items():
                                    if key == patient_test:
                                        cost = sum(value)
                                print(f'The sum of medications ordered is ${cost}')
                            else:
                                print("Not in database. ")
                        else:
                            print("Not in database. ")
                    else:
                        print('Wrong number selected. Try again. \n')
                except ValueError:
                    patient_welcome = float(patient_welcome)
            except ValueError:
                print("Error, not a number. Next time, enter numeric input. \n")
   
 
    def __str__(self):
        return self.patient_names()

        
# Define a nurse module
class Nurse(Doctor):    
    def __init__(self, patient_id = 0, first_name = '', last_name = '', age = 0,
                 address = '', admit_date = '', nurse_login_info = {'n':'2'}):
        super().__init__(first_name = '', last_name = '', dictionary_keys = {}, test_list = {}, cost = 0, tests = {}, total = 0, medication = [], medications = [], price = [],)
        self.patient_id = patient_id
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.address = address
        self.admit_date = admit_date
        self.nurse_login_info = nurse_login_info
        
    def nurse_login(self):
        nurse = Nurse()
        print("Hello! Before going any further, provide your Nurse login please.\n "
              "If a new user, log in with the default credentials and then you'll\n "
              "be able to create a new profile. ")
        while True:
            try:
                nurse_user = input("Username: ")
                #if doctor_user == default_doctor_ID or 
                if nurse_user in self.nurse_login_info.keys():
                    nurse_pass = input("What is your password? ")
                    if nurse_pass in self.nurse_login_info.values():
                        print(f'Welcome {nurse_user}!')
                        nurse.nurse_menu()
                    else:
                        print("Wrong password")
                else:
                    print("Wrong username. ")
            except ValueError:
                print("Try again. ")  
       
    # Define the nurse menu
    def nurse_menu(self):
        doctor = Doctor()
        nurse = Nurse()
        main_menu = Menu()
        while True:
            try:
                nurse_welcome = int(input("Welcome to the Nurse portal.\nTo create a new patient press 1\n"
                                        "To view a patient's details, press 2\n"
                                        "To create a login, press 3\n"
                                        "To return to the main menu, press 0 "))
                try: 
                    nurse_welcome = int(nurse_welcome)
                    if nurse_welcome == 0:
                        main_menu.user_input()
                    if nurse_welcome == 1:
                        print("Nurse Portal selected.")
                        key_add = int(input("How many patients to add? "))
                        for i in range(key_add):
                            """
                            Comment to say now doctor can see nurse patient addition and patient details
                            safe to delete once seen
                            """
                            doctor.database_addition()
                        back_to_patient_menu = input('Back to nurse menu? ')
                        if back_to_patient_menu == "n" or back_to_patient_menu == "N":
                            break
                        while back_to_patient_menu != 'y' and back_to_patient_menu != 'Y':
                            back_to_patient_menu = input("That's not a valid choice. (Y)es or (N)o? ")
                            if back_to_patient_menu == "n" or back_to_patient_menu == "N":
                                main_menu.user_input()
                    elif nurse_welcome == 2:
                        doctor.database()
                    elif nurse_welcome == 3:
                        nurse.nurse_info()
                    else:
                        print('Wrong number selected. Try again. \n')
                except ValueError:
                    nurse_welcome = float(nurse_welcome)
            except ValueError:
                print("Error, not a number. Next time, enter numeric input. \n")

    def nurse_info(self):
            create_new = input('Would you like to create new Nurse Profile (Y)es or (N)o?')
            while create_new != 'y' and create_new != 'Y':
                create_new = input("That's not a valid choice, please try again\n (Y)es or (N)o? ")
                print(create_new)
            if create_new == 'Y' or create_new == 'y':
                print('Let''s create a new profile')
                attributes_list2 = []
                self.first_name = input('Please enter the first name of the nurse you wish to add: ')
                attributes_list2.append(self.first_name)
                self.last_name = input('Please enter the last name of the nurse you wish to add: ')
                attributes_list2.append(self.last_name)
                self.username = input('Please enter new username: ')
                attributes_list2.append(self.username)
                self.password = input('Please enter new password: ')
                attributes_list2.append(self.password)
                print('The following doctor profile was written: \nFirst Name: %s \nLast Name %s \nusername %s \nPassword %s'
                      % (self.first_name, self.last_name, self.username, self.password))
                # Store new nurse login info
                self.nurse_login_info[self.username] = self.password
                print(self.nurse_login_info)
    
# Initialize the program by calling the Menu() and user_input() functions    
initialize = Menu()
initialize.user_input()
